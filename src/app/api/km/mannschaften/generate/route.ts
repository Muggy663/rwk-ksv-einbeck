// src/app/api/km/mannschaften/generate/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/firebase/config';
import { collection, getDocs, addDoc, query, where } from 'firebase/firestore';

export async function POST(request: NextRequest) {
  try {
    console.log('🚀 Starting mannschaften generation...');
    const { saison } = await request.json();
    
    // Schritt 1: Lade Meldungen
    console.log('📋 Loading meldungen...');
    let meldungen = [];
    try {
      const meldungenSnapshot = await getDocs(collection(db, 'km_meldungen'));
      meldungen = meldungenSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      console.log('✅ Found meldungen:', meldungen.length);
    } catch (error) {
      console.error('❌ Error loading meldungen:', error);
      return NextResponse.json({
        success: false,
        error: `Fehler beim Laden der Meldungen: ${error.message}`
      }, { status: 500 });
    }
    
    if (meldungen.length === 0) {
      return NextResponse.json({
        success: false,
        error: 'Keine Meldungen gefunden. Bitte erst Schützen melden.'
      }, { status: 400 });
    }
    
    // Schritt 2: Vereinfachte Mannschafts-Generierung OHNE Schützen-Lookup
    console.log('🏗️ Creating teams from meldungen...');
    const groups = {};
    
    for (const meldung of meldungen) {
      // Verwende clubId direkt aus der Meldung
      const vereinId = meldung.clubId || 'unknown';
      const key = `${vereinId}_${meldung.disziplinId}`;
      
      if (!groups[key]) {
        groups[key] = {
          vereinId,
          disziplinId: meldung.disziplinId,
          meldungen: []
        };
      }
      
      groups[key].meldungen.push(meldung);
    }
    
    console.log('📊 Groups created:', Object.keys(groups).length);
    
    // Schritt 3: Erstelle Mannschaften
    let generated = 0;
    for (const [key, group] of Object.entries(groups)) {
      const { vereinId, disziplinId, meldungen: groupMeldungen } = group as any;
      
      // Bilde 3er-Teams aus Meldungen
      for (let i = 0; i < groupMeldungen.length; i += 3) {
        const teamMeldungen = groupMeldungen.slice(i, i + 3);
        
        if (teamMeldungen.length >= 1) { // Mindestens 1 Schütze
          const mannschaft = {
            vereinId,
            disziplinId,
            wettkampfklassen: teamMeldungen.map(m => m.wettkampfklasse).filter((v, i, a) => a.indexOf(v) === i),
            schuetzenIds: teamMeldungen.map(m => m.schuetzeId),
            schuetzenNamen: teamMeldungen.map(m => m.schuetzeName),
            name: `${vereinId} Team ${Math.floor(i/3) + 1}`,
            saison: saison || '2026',
            createdAt: new Date(),
            autoGenerated: true
          };
          
          console.log('🏆 Creating mannschaft:', mannschaft.name, 'with', teamMeldungen.length, 'shooters');
          
          try {
            await addDoc(collection(db, 'km_mannschaften'), mannschaft);
            generated++;
          } catch (error) {
            console.error('❌ Error creating mannschaft:', error);
            // Weiter mit nächster Mannschaft
          }
        }
      }
    }

    return NextResponse.json({
      success: true,
      generated,
      message: `✅ ${generated} Mannschaften aus ${meldungen.length} Meldungen generiert`
    });

  } catch (error) {
    console.error('💥 Fehler bei Mannschafts-Generierung:', error);
    return NextResponse.json({
      success: false,
      error: `Unerwarteter Fehler: ${error.message}`
    }, { status: 500 });
  }
}