// Erweiterte Firestore Rules für KM-System
// Diese Regeln zu den bestehenden firestore.rules hinzufügen

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // KM-Benutzerberechtigungen
    match /km_user_permissions/{userId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == userId || 
         hasKMAdminRole(request.auth.uid));
    }
    
    // KM-Wettkampfklassen - Lesen für alle, Schreiben nur für Admins
    match /km_wettkampfklassen/{document} {
      allow read: if request.auth != null;
      allow write: if hasKMAdminRole(request.auth.uid);
    }
    
    // KM-Disziplinen - Lesen für alle, Schreiben nur für Admins
    match /km_disziplinen/{document} {
      allow read: if request.auth != null;
      allow write: if hasKMAdminRole(request.auth.uid);
    }
    
    // KM-Meldungen
    match /km_meldungen/{document} {
      allow read: if request.auth != null && 
        (hasKMAdminRole(request.auth.uid) || 
         hasKMOrganizerRole(request.auth.uid) ||
         isOwnClubMeldung(request.auth.uid, resource.data));
      
      allow create: if request.auth != null && 
        (hasKMAdminRole(request.auth.uid) || 
         hasKMOrganizerRole(request.auth.uid) ||
         canCreateMeldungForClub(request.auth.uid, request.resource.data));
      
      allow update: if request.auth != null && 
        (hasKMAdminRole(request.auth.uid) || 
         hasKMOrganizerRole(request.auth.uid) ||
         isOwnClubMeldung(request.auth.uid, resource.data));
      
      allow delete: if hasKMAdminRole(request.auth.uid) || 
        hasKMOrganizerRole(request.auth.uid);
    }
    
    // KM-Mannschaften
    match /km_mannschaften/{document} {
      allow read: if request.auth != null && 
        (hasKMAdminRole(request.auth.uid) || 
         hasKMOrganizerRole(request.auth.uid) ||
         resource.data.vereinId == getUserClubId(request.auth.uid));
      
      allow write: if hasKMAdminRole(request.auth.uid) || 
        hasKMOrganizerRole(request.auth.uid);
    }
    
    // Hilfsfunktionen
    function hasKMAdminRole(userId) {
      // KM-spezifische Berechtigung prüfen
      if (exists(/databases/$(database)/documents/km_user_permissions/$(userId))) {
        let kmPerm = get(/databases/$(database)/documents/km_user_permissions/$(userId)).data;
        return kmPerm.role == 'km_admin' && kmPerm.isActive == true;
      }
      
      // Fallback: RWK-Admin-Berechtigung prüfen
      if (exists(/databases/$(database)/documents/user_permissions/$(userId))) {
        let rwkPerm = get(/databases/$(database)/documents/user_permissions/$(userId)).data;
        return rwkPerm.role == 'admin' && rwkPerm.isActive == true;
      }
      
      return false;
    }
    
    function hasKMOrganizerRole(userId) {
      // KM-spezifische Berechtigung prüfen
      if (exists(/databases/$(database)/documents/km_user_permissions/$(userId))) {
        let kmPerm = get(/databases/$(database)/documents/km_user_permissions/$(userId)).data;
        return (kmPerm.role == 'km_organizer' || kmPerm.role == 'km_admin') && kmPerm.isActive == true;
      }
      
      // Fallback: RWK-Admin hat auch Organizer-Rechte
      if (exists(/databases/$(database)/documents/user_permissions/$(userId))) {
        let rwkPerm = get(/databases/$(database)/documents/user_permissions/$(userId)).data;
        return rwkPerm.role == 'admin' && rwkPerm.isActive == true;
      }
      
      return false;
    }
    
    function getUserClubId(userId) {
      // KM-spezifische Berechtigung prüfen
      if (exists(/databases/$(database)/documents/km_user_permissions/$(userId))) {
        return get(/databases/$(database)/documents/km_user_permissions/$(userId)).data.clubId;
      }
      
      // Fallback: RWK-Berechtigung prüfen
      if (exists(/databases/$(database)/documents/user_permissions/$(userId))) {
        let rwkPerm = get(/databases/$(database)/documents/user_permissions/$(userId)).data;
        if (rwkPerm.role == 'club_representative') {
          return rwkPerm.clubId;
        }
      }
      
      return null;
    }
    
    function isOwnClubMeldung(userId, meldungData) {
      let userClubId = getUserClubId(userId);
      if (userClubId == null) return false;
      
      // Prüfe ob Schütze zum eigenen Verein gehört
      let shooterDoc = get(/databases/$(database)/documents/rwk_shooters/$(meldungData.schuetzeId));
      return shooterDoc.data.clubId == userClubId;
    }
    
    function canCreateMeldungForClub(userId, meldungData) {
      let userClubId = getUserClubId(userId);
      if (userClubId == null) return false;
      
      // Prüfe ob Schütze zum eigenen Verein gehört
      let shooterDoc = get(/databases/$(database)/documents/rwk_shooters/$(meldungData.schuetzeId));
      return shooterDoc.data.clubId == userClubId;
    }
  }
}